function Q(O){return class extends O{#B=[];#h={};lazyload=!1;loaded=!1;constructor(...h){super(...h)}connectedCallback(){if(this.lazyload){const h=new IntersectionObserver((B)=>{B.forEach((I)=>{if(I.isIntersecting)this.initComponent(),h.unobserve(this)})},{threshold:0.1});h.observe(this);return}setTimeout(()=>this.initComponent(),1)}disconnectedCallback(){if(this.loaded)this.onDestroy?.(),this.clearCycles?.()}initComponent(){this.loaded=!0,this.start?.()}stateSubscribe(h,B){this.cycle(()=>h(B))}cycle(h){let B=h();if(B instanceof Promise)B.then((I)=>this.#B.push(I));else this.#B.push(B)}clearCycles(){this.#B.map((B)=>{const I=B();if(I instanceof Promise)I.then(()=>null)}),Object.keys(this.#h).forEach((B)=>{const I=this.#h[B]();if(I instanceof Promise)I.then(()=>null)}),this.#B=[],this.#h={}}namedCycle(h,B){if(this.#h[h]){const P=this.#h[h]();if(P instanceof Promise)P.then(()=>null)}let I=B();if(I instanceof Promise)I.then((P)=>this.#h[h]=P);else this.#h[h]=I}logger(...h){console.info(`[${this.tagName}]`,...h)}}}var E=Q(HTMLElement);var R=function(O,h,B="ram"){const I={};let P=B==="ram"?O:K(h,O,B);function K(j,q,z){if(!j)return q;const D=(z==="local"?localStorage:sessionStorage).getItem(j);return D?JSON.parse(D):q}function L(j,q,z){if(z==="ram"||!j)return;(z==="local"?localStorage:sessionStorage).setItem(j,JSON.stringify(q))}return{get:()=>P,set:(j)=>{const q=P;P=j,L(h,j,B),Object.values(I).forEach((z)=>z(P,q))},subscribe:(j)=>{const q=Math.random().toString(36).substring(2,9);return I[q]=j,j(P,P),()=>{delete I[q]}}}};function F(O){return R(O)}var{set:U,subscribe:G}=F("John");class J extends E{constructor(){super(...arguments)}lazyload=!0;startedAt;input=this.querySelector("input");start(){this.logger("start",this.dataset.name,this.input),this.startedAt=new Date,this.printDate(),this.querySelector("input")?.addEventListener("input",(O)=>{if(O.target instanceof HTMLInputElement)U(O.target?.value)}),this.cycle(()=>{return G((O)=>{this.dataset.name=O,this.querySelector("input").value=O})}),this.stateSubscribe(G,(O)=>{this.querySelector("input").value=O}),this.cycle(async()=>{const O=setInterval(()=>{this.printDate()},1000);return()=>clearInterval(O)})}onDestroy(){this.logger("destroy")}printDate(){this.querySelector("span").innerHTML=`(Module started at ${this.startedAt?.toISOString()}) The date is: ${new Date}`}}customElements.define("atomix-component",J);

//# debugId=586785D1317F957C64756e2164756e21
//# sourceMappingURL=data:application/json;base64,
