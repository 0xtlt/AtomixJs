var G=function(B,h,_,L){var O=arguments.length,$=O<3?h:L===null?L=Object.getOwnPropertyDescriptor(h,_):L,z;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")$=Reflect.decorate(B,h,_,L);else for(var F=B.length-1;F>=0;F--)if(z=B[F])$=(O<3?z($):O>3?z(h,_,$):z(h,_))||$;return O>3&&$&&Object.defineProperty(h,_,$),$};function Z(B){return class extends B{_cycles=[];_namedCycles={};lazyload=!1;loaded=!1;constructor(...h){super(...h)}connectedCallback(){if(this.lazyload){const h=new IntersectionObserver((_)=>{_.forEach((L)=>{if(L.isIntersecting)this.initComponent(),h.unobserve(this)})},{threshold:0.1});h.observe(this);return}setTimeout(()=>this.initComponent(),1)}disconnectedCallback(){if(this.loaded)this.onDestroy?.(),this.clearCycles?.()}initComponent(){if(this.loaded=!0,this.start?.(),this.a_onclick)this.addEventListener("click",this.a_onclick);if(this.a_onsubmit)this.addEventListener("submit",this.a_onsubmit);if(this.a_onchange)this.addEventListener("change",this.a_onchange)}stateSubscribe(h,_){this.cycle(()=>h(_))}cycle(h){let _=h();if(_ instanceof Promise)_.then((L)=>this._cycles.push(L));else this._cycles.push(_)}clearCycles(){this._cycles.map((_)=>{const L=_();if(L instanceof Promise)L.then(()=>null)}),Object.keys(this._namedCycles).forEach((_)=>{const L=this._namedCycles[_]();if(L instanceof Promise)L.then(()=>null)}),this._cycles=[],this._namedCycles={}}namedCycle(h,_){if(this._namedCycles[h]){const O=this._namedCycles[h]();if(O instanceof Promise)O.then(()=>null)}let L=_();if(L instanceof Promise)L.then((O)=>this._namedCycles[h]=O);else this._namedCycles[h]=L}static logger(...h){console.info("[NOT IMPLEMENTED]",...h)}logger(...h){console.info(`[${this.tagName}]`,...h)}}}var J=Z(HTMLElement);var q=function(B,h,_="ram"){const L={};let O=_==="ram"?B:$(h,B,_);function $(P,j,E){if(!P)return j;const H=(E==="local"?localStorage:sessionStorage).getItem(P);return H?JSON.parse(H):j}function z(P,j,E){if(E==="ram"||!P)return;(E==="local"?localStorage:sessionStorage).setItem(P,JSON.stringify(j))}return{get:()=>O,set:(P)=>{const j=O;O=P,z(h,P,_),Object.values(L).forEach((E)=>E(O,j))},subscribe:(P)=>{const j=Math.random().toString(36).substring(2,9);return L[j]=P,P(O,O),()=>{delete L[j]}}}};function Q(B){return q(B)}function D(B,h,_){customElements.define(B,h,_)}function R(B,h){return function(_){D(B,_,h)}}function U(B){return function(h,_){Object.defineProperty(h,_,{get:function(){return this.dataset?this.dataset[B||_]:null},set:function(L){const O=()=>{if(this.isConnected&&this.dataset)this.dataset[B||_]=L;else setTimeout(O,0)};O()}})}}function X(B){return function(h,_){Object.defineProperty(h,_,{get:function(){return this.querySelector(B)},set:function(){}})}}var{set:W,subscribe:Y}=Q("John");class I extends J{constructor(){super(...arguments);this.name="Thomas";this.input=null}startedAt;lazyload=!0;start(){this.logger("start",this.name,this.input),this.startedAt=new Date,this.printDate(),this.querySelector("input")?.addEventListener("input",(B)=>{if(B.target instanceof HTMLInputElement)W(B.target?.value)}),this.cycle(()=>{return Y((B)=>{this.name=B,this.querySelector("input").value=B})}),this.stateSubscribe(Y,(B)=>{this.querySelector("input").value=B}),this.cycle(async()=>{const B=setInterval(()=>{this.printDate()},1000);return()=>clearInterval(B)})}onDestroy(){this.logger("destroy")}printDate(){this.querySelector("span").innerHTML=`(Module started at ${this.startedAt?.toISOString()}) The date is: ${new Date}`}}G([U("name")],I.prototype,"name",void 0),G([X("input")],I.prototype,"input",void 0),I=G([R("atomix-component")],I);

//# debugId=2F91D1C5308C145F64756e2164756e21
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2F0b21peENvbXBvbmVudC50cyIsICJzcmMvYXRvbWl4U3RhdGUudHMiLCAic3JjL3dlYmNvbXBvbmVudHMudHMiLCAic3JjL2RlY29yYXRvcnMudHMiLCAiZXhhbXBsZXMvc2NyaXB0LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWwogICAgImltcG9ydCB7IHR5cGUgQWRkQ3ljbGVGbiB9IGZyb20gXCIuL2N5Y2xlXCI7XG5cbmV4cG9ydCBjb25zdCBDb21wb25lbnQgPSBtYWtlQXRvbWl4Q29tcG9uZW50KEhUTUxFbGVtZW50KTtcbmV4cG9ydCB0eXBlIENvbXBvbmVudFR5cGUgPSBJbnN0YW5jZVR5cGU8dHlwZW9mIENvbXBvbmVudD47XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQXRvbWl4Q29tcG9uZW50PFxuICBFbGVtZW50IGV4dGVuZHMge1xuICAgIG5ldyAoLi4uYXJnczogYW55W10pOiBIVE1MRWxlbWVudDtcbiAgfVxuPihlbGVtZW50OiBFbGVtZW50KSB7XG4gIHJldHVybiBjbGFzcyBleHRlbmRzIGVsZW1lbnQge1xuICAgIC8vIEN5Y2xlcyBzeXN0ZW1cbiAgICBfY3ljbGVzOiBBcnJheTwoKSA9PiBhbnk+ID0gW107XG4gICAgX25hbWVkQ3ljbGVzOiBSZWNvcmQ8c3RyaW5nLCAoKSA9PiBhbnk+ID0ge307XG4gICAgbGF6eWxvYWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBsb2FkZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICBzdXBlciguLi5hcmdzKTtcbiAgICB9XG5cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgIGlmICh0aGlzLmxhenlsb2FkKSB7XG4gICAgICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgICAgICAgIChlbnRyaWVzKSA9PiB7XG4gICAgICAgICAgICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5pdENvbXBvbmVudCgpO1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLnVub2JzZXJ2ZSh0aGlzKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICB7IHRocmVzaG9sZDogMC4xIH1cbiAgICAgICAgKTtcblxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKHRoaXMpO1xuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLmluaXRDb21wb25lbnQoKSwgMSk7XG4gICAgfVxuXG4gICAgZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICBpZiAodGhpcy5sb2FkZWQpIHtcbiAgICAgICAgdGhpcy5vbkRlc3Ryb3k/LigpO1xuICAgICAgICB0aGlzLmNsZWFyQ3ljbGVzPy4oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbml0Q29tcG9uZW50KCkge1xuICAgICAgdGhpcy5sb2FkZWQgPSB0cnVlO1xuICAgICAgdGhpcy5zdGFydD8uKCk7XG5cbiAgICAgIGlmICh0aGlzLmFfb25jbGljaykge1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmFfb25jbGljayk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmFfb25zdWJtaXQpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIHRoaXMuYV9vbnN1Ym1pdCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmFfb25jaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHRoaXMuYV9vbmNoYW5nZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQXRvbWl4IGF1dG8gc3Vic2NyaWJlZCBldmVudHNcbiAgICBhX29uY2xpY2s/KGV2OiBFdmVudCk6IHZvaWQ7XG4gICAgYV9vbnN1Ym1pdD8oZXY6IEV2ZW50KTogdm9pZDtcbiAgICBhX29uY2hhbmdlPyhldjogRXZlbnQpOiB2b2lkO1xuXG4gICAgc3RhdGVTdWJzY3JpYmU8VHlwZT4oXG4gICAgICBzdGF0ZVN1YnNjcmliZUNhbGxiYWNrOiAoXG4gICAgICAgIGNiOiAodmFsdWU6IFR5cGUsIG9sZFZhbHVlOiBUeXBlKSA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPlxuICAgICAgKSA9PiAoKSA9PiB2b2lkLFxuICAgICAgY2FsbGJhY2s6ICh2YWx1ZTogVHlwZSwgb2xkVmFsdWU6IFR5cGUpID0+IHZvaWQgfCBQcm9taXNlPHZvaWQ+XG4gICAgKSB7XG4gICAgICB0aGlzLmN5Y2xlKCgpID0+IHN0YXRlU3Vic2NyaWJlQ2FsbGJhY2soY2FsbGJhY2spKTtcbiAgICB9XG5cbiAgICAvLyBDeWNsZXNcbiAgICBjeWNsZShjYjogQWRkQ3ljbGVGbikge1xuICAgICAgbGV0IGZuID0gY2IoKTtcblxuICAgICAgaWYgKGZuIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICBmbi50aGVuKChmbikgPT4gdGhpcy5fY3ljbGVzLnB1c2goZm4pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2N5Y2xlcy5wdXNoKGZuKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjbGVhckN5Y2xlcygpIHtcbiAgICAgIHRoaXMuX2N5Y2xlcy5tYXAoKGNiKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGNiKCk7XG4gICAgICAgIGlmIChyZXMgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgcmVzLnRoZW4oKCkgPT4gbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5fbmFtZWRDeWNsZXMpO1xuICAgICAgLy8gdW5tb3VudCBuYW1lZCBjeWNsZXNcbiAgICAgIGtleXMuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuX25hbWVkQ3ljbGVzW2tleV0oKTtcbiAgICAgICAgaWYgKHJlcyBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICByZXMudGhlbigoKSA9PiBudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2N5Y2xlcyA9IFtdO1xuICAgICAgdGhpcy5fbmFtZWRDeWNsZXMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBOYW1lZCBjeWNsZXNcbiAgICBuYW1lZEN5Y2xlKG5hbWU6IHN0cmluZywgY2I6IEFkZEN5Y2xlRm4pIHtcbiAgICAgIC8vIHVubW91dCBwcmV2aW91cyBjeWNsZVxuICAgICAgaWYgKHRoaXMuX25hbWVkQ3ljbGVzW25hbWVdKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHRoaXMuX25hbWVkQ3ljbGVzW25hbWVdKCk7XG4gICAgICAgIGlmIChyZXMgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgcmVzLnRoZW4oKCkgPT4gbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBmbiA9IGNiKCk7XG5cbiAgICAgIGlmIChmbiBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgZm4udGhlbigoZm4pID0+ICh0aGlzLl9uYW1lZEN5Y2xlc1tuYW1lXSA9IGZuKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9uYW1lZEN5Y2xlc1tuYW1lXSA9IGZuO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE86IGZpbmlzaCB0aGlzXG4gICAgLy8gc3RhdGljIGF0dGFjaChlbGVtZW50OiBIVE1MRWxlbWVudCB8IHN0cmluZykge1xuICAgIC8vICAgY29uc3QgZWwgPVxuICAgIC8vICAgICB0eXBlb2YgZWxlbWVudCA9PT0gXCJzdHJpbmdcIlxuICAgIC8vICAgICAgID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvcjxIVE1MRWxlbWVudD4oZWxlbWVudClcbiAgICAvLyAgICAgICA6IGVsZW1lbnQ7XG5cbiAgICAvLyAgIGlmICghZWwpIHtcbiAgICAvLyAgICAgdGhyb3cgbmV3IEVycm9yKGBFbGVtZW50IG5vdCBmb3VuZDogJHtlbGVtZW50fWApO1xuICAgIC8vICAgfVxuXG4gICAgLy8gICBjb25zdCBjb21wb25lbnQgPSBuZXcgdGhpcygpO1xuICAgIC8vICAgY29tcG9uZW50LnN0YXJ0Py4oKTtcbiAgICAvLyAgIHJldHVybiBjb21wb25lbnQ7XG4gICAgLy8gfVxuXG4gICAgLy8gTGlmZWN5Y2xlXG4gICAgc3RhcnQ/KCk6IHZvaWQ7XG4gICAgb25EZXN0cm95PygpOiB2b2lkO1xuXG4gICAgLy8gTG9nZ2VyIG1ldGhvZHNcbiAgICBzdGF0aWMgbG9nZ2VyKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICBjb25zb2xlLmluZm8oYFtOT1QgSU1QTEVNRU5URURdYCwgLi4uYXJncyk7XG4gICAgfVxuXG4gICAgbG9nZ2VyKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgICBjb25zb2xlLmluZm8oYFske3RoaXMudGFnTmFtZX1dYCwgLi4uYXJncyk7XG4gICAgfVxuICB9O1xufVxuIiwKICAiLy8gRGVmaW5lIHBvc3NpYmxlIHN0b3JhZ2UgdHlwZXNcbmV4cG9ydCB0eXBlIFN0b3JhZ2VUeXBlID0gXCJsb2NhbFwiIHwgXCJzZXNzaW9uXCIgfCBcInJhbVwiO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGF0ZSBtYW5hZ2VtZW50IHN5c3RlbSB3aXRoIG9wdGlvbmFsIHBlcnNpc3RlbmNlLlxuICogQHBhcmFtIGluaXRpYWxWYWx1ZSAtIFRoZSBpbml0aWFsIHZhbHVlIG9mIHRoZSBzdGF0ZS5cbiAqIEBwYXJhbSBrZXkgLSBPcHRpb25hbCBrZXkgZm9yIHN0b3JpbmcgdGhlIHN0YXRlIGluIGxvY2FsU3RvcmFnZSBvciBzZXNzaW9uU3RvcmFnZS5cbiAqIEBwYXJhbSBzdG9yYWdlVHlwZSAtIERlZmluZXMgd2hlcmUgdGhlIHN0YXRlIGlzIHN0b3JlZDogaW4gUkFNLCBsb2NhbFN0b3JhZ2UsIG9yIHNlc3Npb25TdG9yYWdlLlxuICogQHJldHVybnMgQW4gb2JqZWN0IGNvbnRhaW5pbmcgZnVuY3Rpb25zIHRvIGdldCBhbmQgc2V0IHRoZSBzdGF0ZSwgYW5kIHRvIHN1YnNjcmliZSB0byBzdGF0ZSBjaGFuZ2VzLlxuICovXG5mdW5jdGlvbiBjcmVhdGVBdG9taXhTdGF0ZTxUeXBlPihcbiAgaW5pdGlhbFZhbHVlOiBUeXBlLFxuICBrZXk/OiBzdHJpbmcsXG4gIHN0b3JhZ2VUeXBlOiBTdG9yYWdlVHlwZSA9IFwicmFtXCJcbikge1xuICBjb25zdCBsaXN0ZW5lcnM6IFJlY29yZDxcbiAgICBzdHJpbmcsXG4gICAgKHZhbHVlOiBUeXBlLCBvbGRWYWx1ZTogVHlwZSkgPT4gdm9pZCB8IFByb21pc2U8dm9pZD5cbiAgPiA9IHt9O1xuICBsZXQgdmFsdWUgPVxuICAgIHN0b3JhZ2VUeXBlID09PSBcInJhbVwiXG4gICAgICA/IGluaXRpYWxWYWx1ZVxuICAgICAgOiBnZXRTdG9yZWRWYWx1ZShrZXksIGluaXRpYWxWYWx1ZSwgc3RvcmFnZVR5cGUpO1xuXG4gIC8vIFJldHJpZXZlcyBzdG9yZWQgdmFsdWUgZnJvbSBsb2NhbFN0b3JhZ2Ugb3Igc2Vzc2lvblN0b3JhZ2UuXG4gIGZ1bmN0aW9uIGdldFN0b3JlZFZhbHVlKFxuICAgIGtleTogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgIGRlZmF1bHRWYWx1ZTogVHlwZSxcbiAgICB0eXBlOiBTdG9yYWdlVHlwZVxuICApOiBUeXBlIHtcbiAgICBpZiAoIWtleSkgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcblxuICAgIGNvbnN0IGl0ZW0gPSAodHlwZSA9PT0gXCJsb2NhbFwiID8gbG9jYWxTdG9yYWdlIDogc2Vzc2lvblN0b3JhZ2UpLmdldEl0ZW0oXG4gICAgICBrZXlcbiAgICApO1xuICAgIHJldHVybiBpdGVtID8gSlNPTi5wYXJzZShpdGVtKSA6IGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIC8vIFN0b3JlcyB0aGUgdmFsdWUgaW4gbG9jYWxTdG9yYWdlIG9yIHNlc3Npb25TdG9yYWdlLlxuICBmdW5jdGlvbiBzdG9yZVZhbHVlKFxuICAgIGtleTogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICAgIG5ld1ZhbHVlOiBUeXBlLFxuICAgIHR5cGU6IFN0b3JhZ2VUeXBlXG4gICkge1xuICAgIGlmICh0eXBlID09PSBcInJhbVwiIHx8ICFrZXkpIHJldHVybjtcblxuICAgIGNvbnN0IHN0b3JhZ2UgPSB0eXBlID09PSBcImxvY2FsXCIgPyBsb2NhbFN0b3JhZ2UgOiBzZXNzaW9uU3RvcmFnZTtcbiAgICBzdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShuZXdWYWx1ZSkpO1xuICB9XG5cbiAgY29uc3QgZ2V0VmFsdWUgPSAoKSA9PiB2YWx1ZTtcbiAgY29uc3Qgc2V0VmFsdWUgPSAobmV3VmFsdWU6IFR5cGUpID0+IHtcbiAgICBjb25zdCBvbGRWYWx1ZSA9IHZhbHVlO1xuICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgc3RvcmVWYWx1ZShrZXksIG5ld1ZhbHVlLCBzdG9yYWdlVHlwZSk7XG4gICAgT2JqZWN0LnZhbHVlcyhsaXN0ZW5lcnMpLmZvckVhY2goKGNiKSA9PiBjYih2YWx1ZSwgb2xkVmFsdWUpKTtcbiAgfTtcblxuICAvLyBTdWJzY3JpYmVzIGEgY2FsbGJhY2sgdG8gc3RhdGUgY2hhbmdlcy5cbiAgY29uc3Qgc3Vic2NyaWJlID0gKFxuICAgIGNiOiAodmFsdWU6IFR5cGUsIG9sZFZhbHVlOiBUeXBlKSA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPlxuICApID0+IHtcbiAgICBjb25zdCBpZCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyLCA5KTtcbiAgICBsaXN0ZW5lcnNbaWRdID0gY2I7XG4gICAgY2IodmFsdWUsIHZhbHVlKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGVsZXRlIGxpc3RlbmVyc1tpZF07XG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4geyBnZXQ6IGdldFZhbHVlLCBzZXQ6IHNldFZhbHVlLCBzdWJzY3JpYmUgfSBhcyBjb25zdDtcbn1cblxuLyoqXG4gKiBIb29rIGZvciB1c2luZyBzdGF0ZSBtYW5hZ2VkIGJ5IGNyZWF0ZUF0b21peFN0YXRlIGluIG1lbW9yeS5cbiAqIEBwYXJhbSBpbml0aWFsVmFsdWUgLSBUaGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgc3RhdGUuXG4gKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyBmdW5jdGlvbnMgdG8gZ2V0IGFuZCBzZXQgdGhlIHN0YXRlLCBhbmQgdG8gc3Vic2NyaWJlIHRvIHN0YXRlIGNoYW5nZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VBdG9taXhTdGF0ZTxUeXBlPihpbml0aWFsVmFsdWU6IFR5cGUpIHtcbiAgcmV0dXJuIGNyZWF0ZUF0b21peFN0YXRlKGluaXRpYWxWYWx1ZSk7XG59XG5cbi8qKlxuICogSG9vayBmb3IgdXNpbmcgc3RhdGUgbWFuYWdlZCBieSBjcmVhdGVBdG9taXhTdGF0ZSB3aXRoIGJyb3dzZXIgc3RvcmFnZS5cbiAqIEBwYXJhbSBrZXkgLSBLZXkgZm9yIHN0b3JpbmcgdGhlIHN0YXRlIGluIGxvY2FsU3RvcmFnZSBvciBzZXNzaW9uU3RvcmFnZS5cbiAqIEBwYXJhbSBpbml0aWFsVmFsdWUgLSBUaGUgaW5pdGlhbCB2YWx1ZSBvZiB0aGUgc3RhdGUuXG4gKiBAcGFyYW0gc3RvcmFnZVR5cGUgLSBUeXBlIG9mIGJyb3dzZXIgc3RvcmFnZSB0byB1c2UuXG4gKiBAcmV0dXJucyBBIHR1cGxlIGNvbnRhaW5pbmcgZnVuY3Rpb25zIHRvIGdldCBhbmQgc2V0IHRoZSBzdGF0ZSwgYW5kIHRvIHN1YnNjcmliZSB0byBzdGF0ZSBjaGFuZ2VzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQXRvbWl4QnJvd3NlclN0YXRlPFR5cGU+KFxuICBrZXk6IHN0cmluZyxcbiAgaW5pdGlhbFZhbHVlOiBUeXBlLFxuICBzdG9yYWdlVHlwZTogU3RvcmFnZVR5cGVcbikge1xuICByZXR1cm4gY3JlYXRlQXRvbWl4U3RhdGUoaW5pdGlhbFZhbHVlLCBrZXksIHN0b3JhZ2VUeXBlKTtcbn1cbiIsCiAgImltcG9ydCB7IHR5cGUgQ29tcG9uZW50VHlwZSB9IGZyb20gXCIuL2F0b21peENvbXBvbmVudFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lV2ViQ29tcG9uZW50KFxuICBuYW1lOiBzdHJpbmcsXG4gIGNvbnN0cnVjdG9yOiB7IG5ldyAoZWw6IEVsZW1lbnQpOiBDb21wb25lbnRUeXBlIH0sXG4gIG9wdGlvbnM/OiBFbGVtZW50RGVmaW5pdGlvbk9wdGlvbnNcbikge1xuICBjdXN0b21FbGVtZW50cy5kZWZpbmUobmFtZSwgY29uc3RydWN0b3IsIG9wdGlvbnMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gV2ViQ29tcG9uZW50KG5hbWU6IHN0cmluZywgb3B0aW9ucz86IEVsZW1lbnREZWZpbml0aW9uT3B0aW9ucykge1xuICByZXR1cm4gZnVuY3Rpb24gKGNvbnN0cnVjdG9yOiBhbnkpIHtcbiAgICBkZWZpbmVXZWJDb21wb25lbnQobmFtZSwgY29uc3RydWN0b3IsIG9wdGlvbnMpO1xuICB9O1xufVxuIiwKICAiZXhwb3J0IGZ1bmN0aW9uIGRhdGFzZXQoc2VsZWN0b3I/OiBzdHJpbmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQ6IGFueSwgcHJvcGVydHlLZXk6IHN0cmluZykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gUmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZGF0YSBhdHRyaWJ1dGUgaWYgYXZhaWxhYmxlXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFzZXQgPyB0aGlzLmRhdGFzZXRbc2VsZWN0b3IgfHwgcHJvcGVydHlLZXldIDogbnVsbDtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAvLyBTZXQgdmFsdWVzIGluIGNvbm5lY3RlZENhbGxiYWNrIHRvIGF2b2lkIGVycm9yc1xuICAgICAgICBjb25zdCBpbml0RGF0YXNldFZhbHVlID0gKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLmlzQ29ubmVjdGVkICYmIHRoaXMuZGF0YXNldCkge1xuICAgICAgICAgICAgdGhpcy5kYXRhc2V0W3NlbGVjdG9yIHx8IHByb3BlcnR5S2V5XSA9IG5ld1ZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGluaXREYXRhc2V0VmFsdWUsIDApOyAvLyBSZXRyeSBhZnRlciBhIHNob3J0IGRlbGF5XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpbml0RGF0YXNldFZhbHVlKCk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVlcnkoc2VsZWN0b3I6IHN0cmluZykge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldDogYW55LCBwcm9wZXJ0eUtleTogc3RyaW5nKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXksIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uICgpIHt9LFxuICAgIH0pO1xuICB9O1xufVxuIiwKICAiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBXZWJDb21wb25lbnQsXG4gIGRhdGFzZXQsXG4gIHF1ZXJ5LFxuICB1c2VBdG9taXhTdGF0ZSxcbn0gZnJvbSBcIi4uL2xpYlwiO1xuXG5jb25zdCB7IHNldDogc2V0TmFtZSwgc3Vic2NyaWJlOiBzdWJzY3JpYmVOYW1lIH0gPSB1c2VBdG9taXhTdGF0ZShcIkpvaG5cIik7XG5cbkBXZWJDb21wb25lbnQoXCJhdG9taXgtY29tcG9uZW50XCIpXG5jbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG4gIHN0YXJ0ZWRBdDogRGF0ZSB8IHVuZGVmaW5lZDtcbiAgbGF6eWxvYWQ6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIEBkYXRhc2V0KFwibmFtZVwiKVxuICBuYW1lID0gXCJUaG9tYXNcIjtcblxuICBAcXVlcnkoXCJpbnB1dFwiKVxuICBpbnB1dDogSFRNTElucHV0RWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gIHN0YXJ0KCkge1xuICAgIHRoaXMubG9nZ2VyKFwic3RhcnRcIiwgdGhpcy5uYW1lLCB0aGlzLmlucHV0KTtcbiAgICB0aGlzLnN0YXJ0ZWRBdCA9IG5ldyBEYXRlKCk7XG4gICAgdGhpcy5wcmludERhdGUoKTtcblxuICAgIHRoaXMucXVlcnlTZWxlY3RvcjxIVE1MSW5wdXRFbGVtZW50PihcImlucHV0XCIpPy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgXCJpbnB1dFwiLFxuICAgICAgKGV2KSA9PiB7XG4gICAgICAgIGlmIChldi50YXJnZXQgaW5zdGFuY2VvZiBIVE1MSW5wdXRFbGVtZW50KSBzZXROYW1lKGV2LnRhcmdldD8udmFsdWUpO1xuICAgICAgfVxuICAgICk7XG5cbiAgICB0aGlzLmN5Y2xlKCgpID0+IHtcbiAgICAgIHJldHVybiBzdWJzY3JpYmVOYW1lKChpbnB1dE5hbWUpID0+IHtcbiAgICAgICAgdGhpcy5uYW1lID0gaW5wdXROYW1lO1xuICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3I8SFRNTElucHV0RWxlbWVudD4oXCJpbnB1dFwiKSEudmFsdWUgPSBpbnB1dE5hbWU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICAvLyBPUiBCRVRURVJcbiAgICB0aGlzLnN0YXRlU3Vic2NyaWJlKHN1YnNjcmliZU5hbWUsIChuYW1lKSA9PiB7XG4gICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3I8SFRNTElucHV0RWxlbWVudD4oXCJpbnB1dFwiKSEudmFsdWUgPSBuYW1lO1xuICAgIH0pO1xuXG4gICAgdGhpcy5jeWNsZShhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICB0aGlzLnByaW50RGF0ZSgpO1xuICAgICAgfSwgMTAwMCk7XG5cbiAgICAgIHJldHVybiAoKSA9PiBjbGVhckludGVydmFsKGkpO1xuICAgIH0pO1xuICB9XG5cbiAgb25EZXN0cm95KCkge1xuICAgIHRoaXMubG9nZ2VyKFwiZGVzdHJveVwiKTtcbiAgfVxuXG4gIC8vIEN1c3RvbSBtZXRob2RcbiAgcHJpbnREYXRlKCkge1xuICAgIHRoaXMucXVlcnlTZWxlY3RvcihcbiAgICAgIFwic3BhblwiXG4gICAgKSEuaW5uZXJIVE1MID0gYChNb2R1bGUgc3RhcnRlZCBhdCAke3RoaXMuc3RhcnRlZEF0Py50b0lTT1N0cmluZygpfSkgVGhlIGRhdGUgaXM6ICR7bmV3IERhdGUoKX1gO1xuICB9XG59XG4iCiAgXSwKICAibWFwcGluZ3MiOiAiQUFLTyxTQUFTLENBSWYsQ0FBQyxFQUFrQixDQUNsQixPQUFPLGNBQWMsQ0FBUSxDQUUzQixRQUE0QixDQUFDLEVBQzdCLGFBQTBDLENBQUMsRUFDM0MsU0FBb0IsR0FDcEIsT0FBa0IsR0FFbEIsV0FBVyxJQUFJLEVBQWEsQ0FDMUIsTUFBTSxHQUFHLENBQUksRUFHZixpQkFBaUIsRUFBRyxDQUNsQixHQUFJLEtBQUssU0FBVSxDQUNqQixNQUFNLEVBQVcsSUFBSSxxQkFDbkIsQ0FBQyxJQUFZLENBQ1gsRUFBUSxRQUFRLENBQUMsSUFBVSxDQUN6QixHQUFJLEVBQU0sZUFDUixLQUFLLGNBQWMsRUFDbkIsRUFBUyxVQUFVLElBQUksRUFFMUIsR0FFSCxDQUFFLFVBQVcsR0FBSSxDQUNuQixFQUVBLEVBQVMsUUFBUSxJQUFJLEVBRXJCLE9BR0YsV0FBVyxJQUFNLEtBQUssY0FBYyxFQUFHLENBQUMsRUFHMUMsb0JBQW9CLEVBQUcsQ0FDckIsR0FBSSxLQUFLLE9BQ1AsS0FBSyxZQUFZLEVBQ2pCLEtBQUssY0FBYyxFQUl2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QU8sRUFBYyxDQUFDLElBQWMsQ0FDbEMsS0FBSyxLQUFPLEVBQ1osS0FBSyxjQUFnQyxPQUFPLEVBQUcsTUFBUSxFQUN4RCxFQUNGLEVBRUQsS0FBSyxlQUFlLEVBQWUsQ0FBQyxJQUFTLENBQzNDLEtBQUssY0FBZ0MsT0FBTyxFQUFHLE1BQVEsRUFDeEQsRUFFRCxLQUFLLE1BQU0sU0FBWSxDQUNyQixNQUFNLEVBQUksWUFBWSxJQUFNLENBQzFCLEtBQUssVUFBVSxHQUNkLElBQUksRUFFUCxNQUFPLElBQU0sY0FBYyxDQUFDLEVBQzdCLEVBR0gsU0FBUyxFQUFHLENBQ1YsS0FBSyxPQUFPLFNBQVMsRUFJdkIsU0FBUyxFQUFHLENBQ1YsS0FBSyxjQUNILE1BQ0YsRUFBRyxVQUFZLHNCQUFzQixLQUFLLFdBQVcsWUFBWSxtQkFBbUIsSUFBSSxPQUU1RixDQS9DRSxHQURDLEVBQVEsTUFBTSxHQUpYLEVBS0oseUJBR0EsR0FEQyxFQUFNLE9BQU8sR0FQVixFQVFKLDBCQVJJLEVBQU4sR0FEQyxFQUFhLGtCQUFrQixHQUMxQiIsCiAgImRlYnVnSWQiOiAiMkY5MUQxQzUzMDhDMTQ1RjY0NzU2ZTIxNjQ3NTZlMjEiLAogICJuYW1lcyI6IFtdCn0=
