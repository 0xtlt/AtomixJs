var J=function(D,h,B,O){var _=arguments.length,q=_<3?h:O===null?O=Object.getOwnPropertyDescriptor(h,B):O,E;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")q=Reflect.decorate(D,h,B,O);else for(var G=D.length-1;G>=0;G--)if(E=D[G])q=(_<3?E(q):_>3?E(h,B,q):E(h,B))||q;return _>3&&q&&Object.defineProperty(h,B,q),q};function R(D){return class extends D{_cycles=[];_namedCycles={};lazyload=!1;loaded=!1;constructor(...h){super(...h)}connectedCallback(){if(this.lazyload){new IntersectionObserver((B)=>{B.forEach((O)=>{if(O.isIntersecting)this.initComponent()})},{threshold:0.1}).observe(this);return}setTimeout(()=>this.initComponent(),1)}disconnectedCallback(){if(this.loaded)this.onDestroy?.(),this.clearCycles?.()}initComponent(){if(this.loaded=!0,this.start?.(),this.a_onclick)this.addEventListener("click",this.a_onclick);if(this.a_onsubmit)this.addEventListener("submit",this.a_onsubmit);if(this.a_onchange)this.addEventListener("change",this.a_onchange)}stateSubscribe(h,B){this.cycle(()=>h(B))}cycle(h){let B=h();if(B instanceof Promise)B.then((O)=>this._cycles.push(O));else this._cycles.push(B)}clearCycles(){this._cycles.map((B)=>{const O=B();if(O instanceof Promise)O.then(()=>null)}),Object.keys(this._namedCycles).forEach((B)=>{const O=this._namedCycles[B]();if(O instanceof Promise)O.then(()=>null)}),this._cycles=[],this._namedCycles={}}namedCycle(h,B){if(this._namedCycles[h]){const _=this._namedCycles[h]();if(_ instanceof Promise)_.then(()=>null)}let O=B();if(O instanceof Promise)O.then((_)=>this._namedCycles[h]=_);else this._namedCycles[h]=O}static logger(...h){console.info("[NOT IMPLEMENTED]",...h)}logger(...h){console.info(`[${this.tagName}]`,...h)}}}var K=R(HTMLElement);var U=function(D,h,B="ram"){const O={};let _=B==="ram"?D:q(h,D,B);function q(j,z,F){if(!j)return z;const H=(F==="local"?localStorage:sessionStorage).getItem(j);return H?JSON.parse(H):z}function E(j,z,F){if(F==="ram"||!j)return;(F==="local"?localStorage:sessionStorage).setItem(j,JSON.stringify(z))}return{get:()=>_,set:(j)=>{const z=_;_=j,E(h,j,B),Object.values(O).forEach((F)=>F(_,z))},subscribe:(j)=>{const z=Math.random().toString(36).substring(2,9);return O[z]=j,j(_,_),()=>{delete O[z]}}}};function L(D){return U(D)}function X(D,h,B){customElements.define(D,h,B)}function P(D,h){return function(B){X(D,B,h)}}var{set:Y,subscribe:Q}=L("John");class I extends K{constructor(){super(...arguments)}startedAt;lazyload=!0;start(){this.logger("start"),this.startedAt=new Date,this.printDate(),this.querySelector("input")?.addEventListener("input",(D)=>{if(D.target instanceof HTMLInputElement)Y(D.target?.value)}),this.cycle(()=>{return Q((D)=>{this.querySelector("input").value=D})}),this.stateSubscribe(Q,(D)=>{this.querySelector("input").value=D}),this.cycle(async()=>{const D=setInterval(()=>{this.printDate()},1000);return()=>clearInterval(D)})}onDestroy(){this.logger("destroy")}printDate(){this.querySelector("span").innerHTML=`(Module started at ${this.startedAt?.toISOString()}) The date is: ${new Date}`}}I=J([P("atomix-component")],I);

//# debugId=36A72BF878B470C264756e2164756e21
//# sourceMappingURL=data:application/json;base64,
