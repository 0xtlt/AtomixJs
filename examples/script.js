var K=function(D,h,E,I){var $=arguments.length,q=$<3?h:I===null?I=Object.getOwnPropertyDescriptor(h,E):I,B;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")q=Reflect.decorate(D,h,E,I);else for(var G=D.length-1;G>=0;G--)if(B=D[G])q=($<3?B(q):$>3?B(h,E,q):B(h,E))||q;return $>3&&q&&Object.defineProperty(h,E,q),q};function Q(D){return class extends D{_cycles=[];lazyload=!1;loaded=!1;constructor(...h){super(...h)}connectedCallback(){if(this.lazyload){new IntersectionObserver((E)=>{E.forEach((I)=>{if(I.isIntersecting)this.initComponent()})},{threshold:0.1}).observe(this);return}setTimeout(()=>this.initComponent(),1)}disconnectedCallback(){if(this.loaded)this.onDestroy?.(),this.clearCycles?.()}initComponent(){if(this.loaded=!0,this.start?.(),this.a_onclick)this.addEventListener("click",this.a_onclick);if(this.a_onsubmit)this.addEventListener("submit",this.a_onsubmit);if(this.a_onchange)this.addEventListener("change",this.a_onchange)}cycle(h){let E=h();if(E instanceof Promise)E.then((I)=>this._cycles.push(I));else this._cycles.push(E)}clearCycles(){this._cycles.map((h)=>{const E=h();if(E instanceof Promise)E.then(()=>null)}),this._cycles=[]}static logger(...h){console.info("[NOT IMPLEMENTED]",...h)}logger(...h){console.info(`[${this.tagName}]`,...h)}}}var L=Q(HTMLElement);var R=function(D,h,E="ram"){const I={};let $=E==="ram"?D:q(h,D,E);function q(j,z,F){if(!j)return z;const H=(F==="local"?localStorage:sessionStorage).getItem(j);return H?JSON.parse(H):z}function B(j,z,F){if(F==="ram"||!j)return;(F==="local"?localStorage:sessionStorage).setItem(j,JSON.stringify(z))}return[()=>$,(j)=>{const z=$;$=j,B(h,j,E),Object.values(I).forEach((F)=>F($,z))},(j)=>{const z=Math.random().toString(36).substring(2,9);return I[z]=j,j($,$),()=>{delete I[z]}}]};function O(D){const[h,E,I]=R(D);return[h,E,I]}function U(D,h){customElements.define(D,h)}function P(D){return function(h){U(D,h)}}var[,X,Y]=O("John");class J extends L{constructor(){super(...arguments)}startedAt;lazyload=!0;start(){this.logger("start"),this.startedAt=new Date,this.printDate(),this.querySelector("input")?.addEventListener("input",(D)=>{if(D.target instanceof HTMLInputElement)X(D.target?.value)}),this.cycle(()=>{return Y((D)=>{this.querySelector("input").value=D})}),this.cycle(async()=>{const D=setInterval(()=>{this.printDate()},1000);return()=>clearInterval(D)})}onDestroy(){this.logger("destroy")}printDate(){this.querySelector("span").innerHTML=`(Module started at ${this.startedAt?.toISOString()}) The date is: ${new Date}`}}J=K([P("atomix-component")],J);

//# debugId=E19153C666D55A6C64756e2164756e21
//# sourceMappingURL=data:application/json;base64,
