function I(O){return class extends O{_cycles=[];_namedCycles={};lazyload=!1;loaded=!1;constructor(...h){super(...h)}connectedCallback(){if(this.lazyload){const h=new IntersectionObserver((_)=>{_.forEach((B)=>{if(B.isIntersecting)this.initComponent(),h.unobserve(this)})},{threshold:0.1});h.observe(this);return}setTimeout(()=>this.initComponent(),1)}disconnectedCallback(){if(this.loaded)this.onDestroy?.(),this.clearCycles?.()}initComponent(){if(this.loaded=!0,this.start?.(),this.a_onclick)this.addEventListener("click",this.a_onclick);if(this.a_onsubmit)this.addEventListener("submit",this.a_onsubmit);if(this.a_onchange)this.addEventListener("change",this.a_onchange)}stateSubscribe(h,_){this.cycle(()=>h(_))}cycle(h){let _=h();if(_ instanceof Promise)_.then((B)=>this._cycles.push(B));else this._cycles.push(_)}clearCycles(){this._cycles.map((_)=>{const B=_();if(B instanceof Promise)B.then(()=>null)}),Object.keys(this._namedCycles).forEach((_)=>{const B=this._namedCycles[_]();if(B instanceof Promise)B.then(()=>null)}),this._cycles=[],this._namedCycles={}}namedCycle(h,_){if(this._namedCycles[h]){const P=this._namedCycles[h]();if(P instanceof Promise)P.then(()=>null)}let B=_();if(B instanceof Promise)B.then((P)=>this._namedCycles[h]=P);else this._namedCycles[h]=B}static logger(...h){console.info("[NOT IMPLEMENTED]",...h)}logger(...h){console.info(`[${this.tagName}]`,...h)}}}var Q=I(HTMLElement);var F=function(O,h,_="ram"){const B={};let P=_==="ram"?O:G(h,O,_);function G(j,q,z){if(!j)return q;const E=(z==="local"?localStorage:sessionStorage).getItem(j);return E?JSON.parse(E):q}function H(j,q,z){if(z==="ram"||!j)return;(z==="local"?localStorage:sessionStorage).setItem(j,JSON.stringify(q))}return{get:()=>P,set:(j)=>{const q=P;P=j,H(h,j,_),Object.values(B).forEach((z)=>z(P,q))},subscribe:(j)=>{const q=Math.random().toString(36).substring(2,9);return B[q]=j,j(P,P),()=>{delete B[q]}}}};function X(O){return F(O)}function Y(O,h,_){return F(h,O,_)}function J(O,h,_){customElements.define(O,h,_)}function $(O,h){return function(_){J(O,_,h)}}function D(O){return function(h,_){Object.defineProperty(h,_,{get:function(){return this.dataset?this.dataset[O||_]:null},set:function(B){const P=()=>{if(this.isConnected&&this.dataset)this.dataset[O||_]=B;else setTimeout(P,0)};P()}})}}function A(O){return function(h,_){Object.defineProperty(h,_,{get:function(){return this.querySelector(O)},set:function(){}})}}export{X as useAtomixState,Y as useAtomixBrowserState,A as query,I as makeAtomixComponent,J as defineWebComponent,D as dataset,$ as WebComponent,Q as Component};

//# debugId=BA1A6508CFE2E14D64756e2164756e21
//# sourceMappingURL=data:application/json;base64,
