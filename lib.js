function K(q){return class extends q{_cycles=[];_namedCycles={};lazyload=!1;loaded=!1;constructor(...h){super(...h)}connectedCallback(){if(this.lazyload){new IntersectionObserver((F)=>{F.forEach((H)=>{if(H.isIntersecting)this.initComponent()})},{threshold:0.1}).observe(this);return}setTimeout(()=>this.initComponent(),1)}disconnectedCallback(){if(this.loaded)this.onDestroy?.(),this.clearCycles?.()}initComponent(){if(this.loaded=!0,this.start?.(),this.a_onclick)this.addEventListener("click",this.a_onclick);if(this.a_onsubmit)this.addEventListener("submit",this.a_onsubmit);if(this.a_onchange)this.addEventListener("change",this.a_onchange)}cycle(h){let F=h();if(F instanceof Promise)F.then((H)=>this._cycles.push(H));else this._cycles.push(F)}clearCycles(){this._cycles.map((F)=>{const H=F();if(H instanceof Promise)H.then(()=>null)}),Object.keys(this._namedCycles).forEach((F)=>{const H=this._namedCycles[F]();if(H instanceof Promise)H.then(()=>null)}),this._cycles=[],this._namedCycles={}}namedCycle(h,F){if(this._namedCycles[h]){const j=this._namedCycles[h]();if(j instanceof Promise)j.then(()=>null)}let H=F();if(H instanceof Promise)H.then((j)=>this._namedCycles[h]=j);else this._namedCycles[h]=H}static logger(...h){console.info("[NOT IMPLEMENTED]",...h)}logger(...h){console.info(`[${this.tagName}]`,...h)}}}var P=K(HTMLElement);var I=function(q,h,F="ram"){const H={};let j=F==="ram"?q:E(h,q,F);function E(z,B,D){if(!z)return B;const G=(D==="local"?localStorage:sessionStorage).getItem(z);return G?JSON.parse(G):B}function J(z,B,D){if(D==="ram"||!z)return;(D==="local"?localStorage:sessionStorage).setItem(z,JSON.stringify(B))}return[()=>j,(z)=>{const B=j;j=z,J(h,z,F),Object.values(H).forEach((D)=>D(j,B))},(z)=>{const B=Math.random().toString(36).substring(2,9);return H[B]=z,z(j,j),()=>{delete H[B]}}]};function U(q){const[h,F,H]=I(q);return[h,F,H]}function X(q,h,F){const[H,j,E]=I(h,q,F);return[H,j,E]}function L(q,h,F){customElements.define(q,h,F)}function Z(q,h){return function(F){L(q,F,h)}}export{U as useAtomixState,X as useAtomixBrowserState,K as makeAtomixComponent,L as defineWebComponent,Z as WebComponent,P as Component};

//# debugId=5D3D8FC626262F4F64756e2164756e21
//# sourceMappingURL=data:application/json;base64,
