function G(P){return class extends P{#B=[];#h={};lazyload=!1;loaded=!1;constructor(...h){super(...h)}connectedCallback(){if(this.lazyload){const h=new IntersectionObserver((B)=>{B.forEach((E)=>{if(E.isIntersecting)this.initComponent(),h.unobserve(this)})},{threshold:0.1});h.observe(this);return}setTimeout(()=>this.initComponent(),1)}disconnectedCallback(){if(this.loaded)this.onDestroy?.(),this.clearCycles?.()}initComponent(){this.loaded=!0,this.start?.()}stateSubscribe(h,B){this.cycle(()=>h(B))}cycle(h){let B=h();if(B instanceof Promise)B.then((E)=>this.#B.push(E));else this.#B.push(B)}clearCycles(){this.#B.map((B)=>{const E=B();if(E instanceof Promise)E.then(()=>null)}),Object.keys(this.#h).forEach((B)=>{const E=this.#h[B]();if(E instanceof Promise)E.then(()=>null)}),this.#B=[],this.#h={}}namedCycle(h,B){if(this.#h[h]){const I=this.#h[h]();if(I instanceof Promise)I.then(()=>null)}let E=B();if(E instanceof Promise)E.then((I)=>this.#h[h]=I);else this.#h[h]=E}logger(...h){console.info(`[${this.tagName}]`,...h)}}}var M=G(HTMLElement);var z=function(P,h,B="ram"){const E={};let I=B==="ram"?P:D(h,P,B);function D(L,O,j){if(!L)return O;const q=(j==="local"?localStorage:sessionStorage).getItem(L);return q?JSON.parse(q):O}function F(L,O,j){if(j==="ram"||!L)return;(j==="local"?localStorage:sessionStorage).setItem(L,JSON.stringify(O))}return{get:()=>I,set:(L)=>{const O=I;I=L,F(h,L,B),Object.values(E).forEach((j)=>j(I,O))},subscribe:(L)=>{const O=Math.random().toString(36).substring(2,9);return E[O]=L,L(I,I),()=>{delete E[O]}}}};function R(P){return z(P)}function U(P,h,B){return z(h,P,B)}export{R as useAtomixState,U as useAtomixBrowserState,G as makeAtomixComponent,M as AHTMLElement};

//# debugId=21A15DBA7811F94F64756e2164756e21
//# sourceMappingURL=data:application/json;base64,
