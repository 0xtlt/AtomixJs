function K(j){return class extends j{_cycles=[];lazyload=!1;loaded=!1;constructor(...h){super(...h)}connectedCallback(){if(this.lazyload){new IntersectionObserver((E)=>{E.forEach((q)=>{if(q.isIntersecting)this.initComponent()})},{threshold:0.1}).observe(this);return}setTimeout(()=>this.initComponent(),1)}disconnectedCallback(){if(this.loaded)this.onDestroy?.(),this.clearCycles?.()}initComponent(){if(this.loaded=!0,this.start?.(),this.a_onclick)this.addEventListener("click",this.a_onclick);if(this.a_onsubmit)this.addEventListener("submit",this.a_onsubmit);if(this.a_onchange)this.addEventListener("change",this.a_onchange)}cycle(h){let E=h();if(E instanceof Promise)E.then((q)=>this._cycles.push(q));else this._cycles.push(E)}clearCycles(){this._cycles.map((h)=>{const E=h();if(E instanceof Promise)E.then(()=>null)}),this._cycles=[]}static logger(...h){console.info("[NOT IMPLEMENTED]",...h)}logger(...h){console.info(`[${this.tagName}]`,...h)}}}var P=K(HTMLElement);var I=function(j,h,E="ram"){const q={};let D=E==="ram"?j:G(h,j,E);function G(z,B,F){if(!z)return B;const H=(F==="local"?localStorage:sessionStorage).getItem(z);return H?JSON.parse(H):B}function J(z,B,F){if(F==="ram"||!z)return;(F==="local"?localStorage:sessionStorage).setItem(z,JSON.stringify(B))}return[()=>D,(z)=>{const B=D;D=z,J(h,z,E),Object.values(q).forEach((F)=>F(D,B))},(z)=>{const B=Math.random().toString(36).substring(2,9);return q[B]=z,z(D,D),()=>{delete q[B]}}]};function U(j){const[h,E,q]=I(j);return[h,E,q]}function X(j,h,E){const[q,D,G]=I(h,j,E);return[q,D,G]}function L(j,h){customElements.define(j,h)}function Z(j){return function(h){L(j,h)}}export{U as useAtomixState,X as useAtomixBrowserState,K as makeAtomixComponent,L as defineWebComponent,Z as WebComponent,P as Component};

//# debugId=0C28CEF2635DFCD464756e2164756e21
//# sourceMappingURL=data:application/json;base64,
