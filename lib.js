class N{h;_cycles=[];constructor(h){this.el=h}cycle(h){let H=h();if(H instanceof Promise)H.then((M)=>this._cycles.push(M));else this._cycles.push(H)}clearCycles(){this._cycles.map((h)=>{const H=h();if(H instanceof Promise)H.then(()=>null)}),this._cycles=[]}static attach(h){const H=typeof h==="string"?document.querySelector(h):h;if(!H)throw new Error(`Element not found: ${h}`);const M=new this(H);return M.start?.(),M}static logger(...h){console.info("[NOT IMPLEMENTED]",...h)}logger(...h){console.info(`[${this.element.tagName}]`,...h)}get element(){return this.el}query(h){return this.element.querySelector(h)}}var I=function(h,H,M="ram"){const B={};let q=M==="ram"?h:F(H,h,M);function F(j,D,E){if(!j)return D;const G=(E==="local"?localStorage:sessionStorage).getItem(j);return G?JSON.parse(G):D}function K(j,D,E){if(E==="ram"||!j)return;(E==="local"?localStorage:sessionStorage).setItem(j,JSON.stringify(D))}return[()=>q,(j)=>{const D=q;q=j,K(H,j,M),Object.values(B).forEach((E)=>E(q,D))},(j)=>{const D=Math.random().toString(36).substring(2,9);return B[D]=j,j(q,q),()=>{delete B[D]}}]};function U(h){const[H,M,B]=I(h);return[H,M,B]}function X(h,H,M){const[B,q,F]=I(H,h,M);return[B,q,F]}function J(h,H,M,B=HTMLElement){customElements.define(h,class extends B{instance=null;observer=null;constructor(){super();if(M)this.observer=new IntersectionObserver((q)=>{q.forEach((F)=>{if(F.isIntersecting&&!this.instance)this.instance=new H(this),this.instance.start?.()})},{threshold:0.1});else this.instance=new H(this)}connectedCallback(){if(this.observer)this.observer.observe(this);else this.instance?.start?.()}disconnectedCallback(){if(this.instance?.onDestroy?.(),this.instance?.clearCycles?.(),this.observer)this.observer.disconnect()}})}function Z(h){return function(H){J(h,H,!1,HTMLElement)}}function _(h){return function(H){J(h,H,!0,HTMLElement)}}export{U as useAtomixState,X as useAtomixBrowserState,J as defineWebComponent,_ as WebLazyComponent,Z as WebComponent,N as Component};

//# debugId=64AA2E5660319C3664756e2164756e21
//# sourceMappingURL=data:application/json;base64,
